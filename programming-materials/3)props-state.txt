 PROPS/STATE

- PROPS
- arguments to func
- outside component
 -----------------------------------       
- PARENT -> CHILD  (props)
- u App.js zadajemo(PARENT)
import{Component} from './Component.js

state= {
title:"miha"
}

changeTheWorld = (newTitle) => {
	this.setState(title.newTitle)
}

- u <Component doWhatever={this.changeTheworld.bind(this,"sonja")} title="Mihael"/> ,

--------------------------------------------
 a koristimo u Component.js {this.props.name}
CHILD
import React from ./react

 const child = = (props) => {
	return (
	<div>
		<button onClick={props.doWhatever}> {props.title} </button>
        </div>	
	)
}
}
-------------------------------------------------------------------------------------
GRANDPARENT -> PARENT -> CHILD

- u App.js zadajemo(GRANDPARENT)
import{Parent} from './Parent.js

state= {
title:"miha"
}

changeTheWorld = (newTitle) => {
	this.setState(title.newTitle)
}

- u <Parent doWhatever={this.changeTheworld.bind(this,"sonja")} title="Mihael"/> ,
-------------------------------------------------------------------------------------
PARENT.JS
import Child from "./Child"

const Parent = (PROPS) => {
	return (
		<div>
			<Child {...props} status="high"/>  spread operator da posalje sve props od grand to child, a status je dodatni prop
		</div>
	)
}

---------------------------------------------------------------------------------------
CHILD
import React from ./react

 const child = = (props) => {
	return (
	<div>
		<button onClick={props.doWhatever}> {props.title} {props.status} </button> --title je od grand, status je od parenta
        </div>	
	)
}
}

-----------------------------------------------------------------------------------
SIBLINGS

PARENT.JS
import Child from "./Child"

changeTheWorld= (newTitle) => {
	this.setState(title.newTitle)
}

keepTheWorld= (newTitle) => {
	this.setState(title.newTitle)
}

const Parent = (PROPS) => {
	return (
		<div>
			<Child changeTheWorldEvent ={this.changeTheWorld.bind(this,"novi svijet")} />  
                        <Child keepTheWorldEvent={this.keepTheWorld.bind(this,"ocuvaj svijet")} {keepTheWorldEvent} /> 
		</div>
	)
}
-------------------------------------------------------------------------------
CHILD
import React from ./react

 const child = = (props) => {
	return (
	<div>
		<button onClick={props.changeTheWorldEvent} onClick{onClick={props.keepTheWorldEvent}}> {props.title} {props.status} </button> --title je od grand, status je od parenta
        </div>	
	)
}
}
-------------------------------------------------------------------------------------
-zadajemo:
App.js
 <Props to="Mihael" 
             from="Morty"
             num={555}
             hobbies={['piano','singing','dancing','acting','rock','movies']}
             index={1}
      />

- koristimo:
Child.js

      render() {
      const {name, hobbies} = this.props; /* da ne pisemo dugo this.props.name */
      return (<div className="div-props">
              <h1 style={{fontSize: '50px', background: 'yellow'}}>Props</h1>
              <p>
                hi ' {this.props.to} ' from ' {this.props.from} ' 
                on the number {this.props.num} 
              </p>
              <p>name is: {name}</p>
              <p>hobbies are:
                  <ul>
                      {hobbies.map((h, index) =>  <li key={index}>{h}</li>)}           {/* looping kroz hobije a index da se ne ponavljaju*/}
                  </ul>
              </p>            
            </div>
--------------------------------------------------------------
PARENT -> CHILD + USESTATE
PARENT
import React, {useState} from 'react'
import Child from './Child';

function App() {
const [ime, setIme] = useState("marko")


const naPromjenu = (e) => {
  setIme(e.currentTarget.value);
  console.log(ime);
}
  return (
    <div>
      <p>ime je: {ime}</p>
      <input type="text" onChange={naPromjenu} />          - TU SE RADI PROMJENA U PARENTU
      <Child age="29" setImeFromParent={ime}/> - TU SE SALJU TE PROMJENE U CHILD, SALJEMO:age i setImeFromParent u Child
    </div>
  )
}
export default App
---------------------------------------------------------------------------------
CHILD-
import React from 'react'

function Child(props) {                       - tu se nalaze age i setImeFromParent(ako console.log(props) ih vidis)
    console.log("props u childu", props)
    return (
        <div>
            <p>ovo su godine u childu: {props.age},a setIme  childu  je : {props.setImeFromParent}</p>
        </div>
    )
}

export default Child
--------------------------------------------------------------------------------------
- CHILD -> PARENT + USESTATE
- change parent state from within a child component, USESTATE
PARENT
imporT Child from "./Child.js"

function Parent () {
 [name, setName]=useState("adam")

 return(
        <Child id="2" onChange={(value) => setName(value)}/>  -onChange od paretna koristi useState
	<div> {name} </div >
)

}

export default Parent;
----------------------------------------------
CHILD
import React from "./React.js"

function Child (props) {                  -u ovim props je onChange i id
)

 return(
        <input type="text" onClick={ (props) => props.onChange(event.target.value) }/> - na klik pozivamo onChange od parenta
)

}

export default Child;
--------------------------------------------------------------
CHILD -> PARENT + USESTATE ////////////////////////////////////////////////////////////////////////
PARENT
import TaskFields from './TaskFields';

const GeneralTaskCreate = ({ setShowDialog, refreshList, projectId}) => {
  const [create] = useCreate('tasks');
  const notify = useNotify();
  const [priority, setPriority] = useState();                 -> NEW PRIORITY STATE (sljanje iz child->parent)
  
  const handleSave = (values) => {
   
    let start = values.startDate;
    start = new Date(start);
    start.setHours(start.getHours() + values.duration);
    values['endDate'] = start;
    values['priority'] = priority;                      -> DODAJE U LISTU OBJEBATA PRIORITY COLUMNS S VRIJEDNOSCU PRIORITY (sljanje iz child->parent)
    console.log("priority u taskCreate",values );

return (
    <DialogContent>
      <SimpleForm
        resource="tasks"
        save={handleSave}
        toolbar={<PostQuickCreateButtonToolbar onCancel={handleCancel} />}
      >
        <TaskFields projectId={projectId} taskType={GENERAL_TASK} setPriority={setPriority} />   -> salje se u child (sljanje iz child->parent)
      </SimpleForm>
    </DialogContent>
------------------------------------------------------------
CHILD
const TaskFields = ({ taskType, projectId, editRecord, setPriority }) => {  -> PRIORIY IZ PARENTA (sljanje iz child->parent)
  const { t } = useTranslation(['translation']);
  const { values } = useFormState({ subscription: spySubscription });
   const [value, setValue] = useState('');                                     ->set values unutra childa//nije slanje

   const handleChange = (event) => {
    setValue(event.target.value);
    setPriority(event.target.value);                                            ->setPiroity za parent(sljanje iz child->parent)
    console.log("value iz taskfields",event.target.value)
  };	
RETURN {
<RadioGroup
              source="priority"                       
              value={value}                                        -> unutar child//nije slanje

---------------------------------------------------------------------------------------------------
- CHILD -> PARENT
- cant send props from child->parent, but you can send function
- child call a fucntion, that changes state in parent
- his can be done by using the onChange/onClick event handler and useState (react hooks 

-when you clik button in Child, it will change name(Bob to Ania) in Parent
Parent.js
import React, { useEffect, useState } from 'react';
import Child from './Child';

function Parent() {
  const [word,setWord] = useState('Bob')		

  return (
    <div>
          <h1> {word} </h1>
         <Child 
	  changeWord = { word => setWord(word)}          - PROPS KOJI SE SALJE U CHILD changeWord
         />
    </div>
  )
}

export default Parent;

Child.js
import React, { useEffect, useState } from 'react';

function Child(props) {
  return (
    <div>
   	<button 
	  onClick= { () => props.changeWord('Ania') }
 	> click me </button>
    </div>
  )
}

export default Child;

------------------------------------------------------------------------------------------
 STATE
- child -> child / parent ->parent 
- inside componenet
- state is used to change the component, state from within.
- u componenti(Persons.js) zadajemo i tamo koristimo
- props zadajemo u App.js, a koristimo u Persons.js

-zadajemo:
class State extends Component {
state={
      score:0,
      gameOver:false
    }
To je skraÄ‡eno od:
    constructor(props) {
      super(props);
      this.state = {  
          score:0,
          gameOver:false   
      };
      this.singleKill = this.singleKill.bind(this);

- koristimo:
render(){
    return(
      <div>
        <h2>your score is: {this.state.score} </h2>
      </div>
-------------------------------------------------------------
 SETSTATE
- Ako MENJAMO state -> setState

- mijenjamo ime:
export class Footer extends Component {
  state = {
    persons: [{ name: "max" }, { name: "maximus" }, { name: "maximilan" }],
  };

  switchName = () => {
    this.setState (
       persons: [{ name: "hans" }, { name: "cimer" }, { name: "man" }],
  )
  };
ime sad promjenjeno na klik:
<button onclick={this.switchName}>Switch name!</button>
        

-------------------------------------------------------------
PROPS DESTRUCTURING (KAKO CEMO PROPS KORISTIT)
1. NACIN
PARENT
<Component doWhatever={handleChange()} title="Mihael"/> ,

CHILD
 const child =  (props) => {
	return (
	<div>
		<button onClick={props.doWhatever}> {props.title} </button>
        </div>	
-----------------------
2. NACIN
PARENT
<Component doWhatever={handleChange()} title="Mihael"/> ,

CHILD
 const child =  (props) => {
        const { doWhatever, title} = props; 
	return (
	<div>
		<button onClick={doWhatever}> {title} </button>
        </div>	
-------------------
2.1 NACIN
PARENT
<Component doWhatever={handleChange()} title="Mihael"/> ,

CHILD
 const child =  ({details}) => {
        const { doWhatever, title} = details; 
	return (
	<div>
		<button onClick={doWhatever}> {title} </button>
        </div>	
-------------------
3. NACIN
PARENT
<Component doWhatever={handleChange()} title="Mihael"/> ,

CHILD
 const child =  ({details: {doWhatever, title } ) => {
        const { doWhatever, title} = details; 
	return (
	<div>
		<button onClick={doWhatever}> {title} </button>
        </div>	
-----------------



...........................................................................................
CUSTOM CHILD -> AKO IMAMO DUPLICIRAN KOD U PARENTU, MOZEMO CHILD POOPCIT 

PARENT

import React from "react";
import {useForm} from 'react-hook-form'
import { FormInput } from "./FormInput";

export const LoginForm = () => {
  const {register, handleSubmit, errors} = useForm({
  })

  const onSubmit = ({login, password}) => {
    alert(`Login: ${login}, password: ${password}`);
  };

  return (
    <form onSubmit={handleSubmit(onSubmit)}>
      <FormInput                                               -> SALJEMO PROPS U CHILDREN
        id="login"
        name="login"
        type="text"
        label="Login"
        register={register}
        error={errors.login}
      />
      <FormInput 
        id="password"
        type="password"
        name="password"
        label="Password"
        register={register}
        error={errors.password}
      />
      <button type="submit">Log in</button>
    </form>
  );
};

--------------------------------
CHILD-FormInput.js

import React from 'react'

export const FormInput = ({register, errors, label, id, ...inputProps}) => {    -> props koje dobijemo od parenta
  return <>
    <label htmlFor={id}>{label}</label>
    <input
      ref={register}                                                            -> KORISTIMO PROPSE
      id={id}
      name="password"
      type="password"
    />
    {errors.password && <div>{errors.password.message}</div>} 
  </>
}


