 FLEXBOX
 ROW -horizontal lj/d
 COLUMN -vertical g/d

- other way of display(inline-block,..)


- display:flex; na npr <div>
              - > kada stavis display:flex; pretvoris element u flex container/parent
              - > elementi u flex cointaineru su flex items/children

FLEX CONTAINER

- flex-direction:row/column; row default
- flex-wrap:nowrap/wrap; default -kako pomicemo display(smanjujemo) items se stavljaju jedan ispod drugog

- JUSTIFY-CONTENT - obrnuto od align items ali ima space-between
                  - ovisi dal smo u row/column
		  - flex-start | flex-end | center | space-between | space-around | stretch

- ALIGN-ITEMS: - ovisi sal smo u row/column
               - flex-start | flex-end | center | baseline | stretch

-  primjer;
  - flex-direction:row;
    align-items:center; centrira s obzirom g/d
    jusitfy-content:center; centrira s obziron na lj/d
  
  - flex-direction:column: 
    align-items:center; centrira s obziom na lj/d
    justify-content:center; centrira s obziron na g/d

- ALIGN-CONTENT - flex-start | flex-end | center | space-between | space-around | stretch

----------------------
flex-direction:row;
- MAIN AXIS LJ/D
- CROSS     G/D

flex-direction:column;
- CROSS AXIS LJ/D
- MAIN     G/D
---------------------------------------------------------------------------------------------
 
 GRID

- da bi cointainer pretvorili u grid, display:grid;
- fixed/absolute elements are NOT for grid(npr. fixed header), oposite main area/footer(jesu za grid)

 GRID COINTAINER
- .container {
  margin: 20px;
  display: grid;
  grid-template-columns: 200px 1fr 20% 1fr; -> fr = 100%-200px-20% i sad podijeli preostali prostor na 3 jednaka
 (grid-template-columns: 200px 10px 20% auto;) -> AUTO ispuni preostali prostor
  grid-template-rows: 5rem 2.5rem;
}


- 4 jednaka column, svaki 20% sirok:             grid-template-columns:repeat(4, 20%);
- min/max height(row) or min/max width(column):  grid-template-rows: 5rem minmax(50px, 200px);

 CHILD-POSITIONING

- .el3 {
  background: rgba(0, 128, 0, 0.5);
  grid-column-start: 3;
  grid-column-end: 5;         (shorthand:  grid-column: 3 / 5;
 (grid-column-end: span 2;) ->poteze se preko 2 podrucja(od 3 do 5)
  grid-row-start: 1;
  grid-row-end: 3;
 (grid-row-end: -1;)  ->ako koristimo -1 to je kao da kazemo da ide od prve do zadnje!
}

 NAMING ROWS/COLUMNS

- grid-template-rows: [row-1-start] 5rem [row-2-end] 2.5rem;

 GAP(distance between rows/colums)

- .container {
  margin: 20px;
  display: grid;
  grid-template-columns: 200px 2fr 20% 1fr;
  grid-template-rows: 5rem 2.5rem;
  grid-column-gap: 20px;                (shorthand: grid-gap: 10px 20px; prvi je za row 10px, a drugi za column 20px)
                                                    grid-gap 10px; za sve 

 GRID AREA

- zamjenjuje grid-row/columns-start/end

- .el3{
       grid-area: 1 / 3 / 3 / 5;} -> grid-row-start: 1;
                                     grid-row-end: 3;
                                     grid-column-start: 3;
  			             grid-column-end: 5; 
                                  -> grid-row-start / grid-column-start / grid-row-end / grid-column-end
-------------------------------------------------------------------------------------------------------------------------------- 
 BRŽE I LAKŠE OZNAĆAVANJE
 
  1)STVORIS GRID KONTEJNEr(3X4 NPR)
    .container{ display: grid;
                grid-template-rows: 5rem 2.5rem 200Ppx;          3
                grid-template-columns: 200px 2fr 20% 1fr;        4
 
  2)NAZOVES 
     .container{ grid-template-areas: "header header header headeer"
                                       "side   side   main   main"
                                      "foooter footer footer footer";}
             
  3)ELEMENTIMA SAMO DODAS NAZIV .el3{grid-area: header;}

  4)PRIMJER
- ako imamo 3rows X 4columns                                 
- .container{ display: grid;
              grid-template-rows: 5rem 2.5rem 200Ppx;
              grid-template-columns: 200px 2fr 20% 1fr;
              grid-column-gap: 20px;
              grid-template-areas: "header header header headeer"
                                   "side     .     main   main"
                                   "foooter footer footer footer";}

- .el1{ grid-area: header;}
- .el4{ grid-area: footer;}
- .el3{ grid-area: side;}
- .el4{ grid-area: main;}
---------------------------------------------------------------------------------------------------------------------------                                                    
   HEADER/main/footer

- header je vecinom fixed i nemjde u grid (main/footer da)
1)nacin
- *{}
-  html{height:100%;}                   -> da radi auto kod grida
- .body{display:grid;
        margin:0;
        grid-template-rows: auto 8rem;  -> 8rem je za footer, a ostali prostor popunjeni je za main                              
	padding-top: 4rem;              -> da body pocinje ispod headera! jer je header 4rem.
        height:100%;                    -> da bi radio auto kod grid-template-rows + dodati height na html{height:100%;}
2)nacin
*{}
-  html{height:100%;}                   -> da radi auto kod grida
- .body{display:grid;
        margin:0;
                                     FIT CONTENT - ako nema contenta onda je 8 rem min, ako ga ima onda se siri koliko mu treba u dio main:auto....jer kod mobile view footer zna biti veci od 8rem 
        grid-template-rows:4rem auto fit-content(8rem);  -> 4rem da bude slobodno za header(on nije grid jer fixed),ostali prostor popunjeni je za main, a minimalno 8 rem za footer                              
	grid-template-areas: "header"       -> ostavili mesto za header ali njega na vezemo za grid
                             "main"
                             "footer";
        height:100%;                        -> da bi radio auto kod grid-template-rows + dodati height na html{height:100%;}
- .main{grid-area:main;}
- .main{grid-area:footer;}
- .header{                                  -> header nejde u grid jer je fixed
  width: 100%;
  position: fixed;
  top: 0;
  left: 0;
  background: #2ddf5c;
  padding: 0.5rem 1rem;
  z-index: 60;
  display: flex;
  align-items: center;                     ->
  justify-content: space-between;          -> logo/ostalo
}
------------------------------------------------------------------------------
 POSITION GRID ELEMENTS

 SVI ELEMENTI
.container{ justify-items: center;           svi lokalno u gridu! lj/d centrira u tom grid area...  center,stretch,start,end
            align-items: center;             svi lokalno u gridu! g/d(vertical)  centrira 
            justify-content: center;         cijeli grid(sve u njemu) centrira u parentu!    npr. body-parent, container-grid -> centrira se container u body  
            align-content: center;           cijeli grid vertical

 POJEDINAČNI
.el2{      justify-self:center;
           align-self: center;  
------------------------------------------------------------------------------------------
 RESPONSIVE

- desktop
  .container {
  margin: 20px;
  display: grid;
  grid-template-rows: 5rem 2.5rem 200px;
  grid-template-columns: 200px 2fr 20% 1fr;
  grid-column-gap: 20px;
  grid-template-areas:
    "header header header header"
    "side   side   main   main"
    "footer footer footer footer";
}

- mobile
@media (max-width: 40rem) {
 .container {
  margin: 20px;
  display: grid;
  grid-template-rows: 5rem 2.5rem 200px 100px;  -> dodali smo row
  grid-template-columns: 200px 2fr 20% 1fr;
  grid-column-gap: 20px;
  grid-template-areas:
    "header header header header"       (u mobile je bolje da svaki ima cijeli prostor, pa dodajemo rowse)
    "main  main   main   main"
    "side  side  side  side  "
    "footer footer footer footer";
}

