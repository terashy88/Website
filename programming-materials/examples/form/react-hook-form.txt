npm install react-hook-form

1. BASIC INPUT/SELECT,CHECKBOX

- REF u input(preko njega dobijvaju podatke
import React from 'react';
import { useForm } from 'react-hook-form';

export default function DemoForm() {
  const {register, handleSubmit, errors} = useForm();             -> register function to determ which fields we want to be part of our validation
                                                                  -> handleSubmit used for onSubmit forme
                                                                  ->    

  const onSubmit = (data) => {              -> when the form will be procesed and validated we will get all the data from form
      console.log(data)
  }

  return (
    <form className={classes.form} onSubmit={handleSubmit(onSubmit)} >  ->ONsUBMIT IS CALLBACK IN HANDLESUBMIT
   
            <input type="text" name="name" ref={register} />       ->PREKO REF=[REGISTER] REACT-HOOK-FORM HANDLE AND TRACK CHANGES IN INPUTS( NE TREBAMO VALUE, ONCHANG EVENTS)
          
            <input type="text" name="email" ref={register}  />     -> preko NAME react-hook-form kreira data object field { ...email: "sto vec uneses", phone :"nesto"... }
         
            <input type="text" name="phone" ref={register} />
        
            <input type="text" name="firm" ref={register}  />         -> regular input

	    <select name="category" ref={register}>                   -> select
          	<option value="">Select...</option>
          	<option value="A">Category A</option>                 -> radio/checkbox
          	<option value="B">Category B</option>
            </select>

            <input name="Developer" type="radio" value="Yes" ref={register({ required: true })}/>
            <input name="Developer" type="radio" value="No" ref={register({ required: true })}/>	

	    <input
          	type="password"                                       -> password validation
          	name="password"
          	ref={register({ required: {value: true, message:"password is required"} , minLength: { value: 8, message:"too short password"} })}    -> password je required(ako da nema ispisuje message) i ima minLength(ispisuje isto messaqge)
       	    />
            {errors.password && <p> {errors.password.message} </p>}                                                                                   -> ispisujemo greske

            <button type="submit">Pošaljite upit</button>	
          
            <Button type="submit" >
            	Pošaljite upit
            </Button>
    </form>
  );
}
...........................................................................................
2. UPLOAD FILES USING REACT-HOOK--FORM

import React from 'react';
import { useForm } from 'react-hook-form';

export default function UploadFile() {
  const {register, handleSubmit, errors} = useForm();

  const onSubmit = (data) => {                               ->data object contains values from our form     
      console.log(data)
  }

  return (
    <form  onSubmit={handleSubmit(onSubmit)} > 
   
            <input type="file" ref={register} name="picture"  />     
                                                                               
            <button type="submit">Pošaljite upit</button>	
          
    
    </form>
  );
}
------------------------------------------------------------------------------------------------
3. CUSTOM INPUT -> ako imamo dupliciranje kod u parentu

PARENT

import React from "react";
import logIn from "./log-in.png";
import {useForm} from 'react-hook-form'
import * as Yup from 'yup'
import { FormInput } from "./FormInput";

export const LoginForm = () => {
  const {register, handleSubmit, errors} = useForm({
    mode: 'onBlur',
    validationSchema: Yup.object({
      login: Yup.string().max(10, 'Login must be shorter than 10 characters').required('Required'),
      password: Yup.string().min(6, 'Password should be longer than 6 characters').required('Required')
    }),
  })

  const onSubmit = ({login, password}) => {
    alert(`Login: ${login}, password: ${password}`);
  };

  return (
    <form onSubmit={handleSubmit(onSubmit)}>
      <header>
        <img width="60" src={logIn} alt="log in" />
      </header>
      <FormInput                                               -> SALJEMO PROPS U CHILDREN
        id="login"
        name="login"
        type="text"
        label="Login"
        register={register}
        error={errors.login}
      />
      <FormInput 
        id="password"
        type="password"
        name="password"
        label="Password"
        register={register}
        error={errors.password}
      />
      <button type="submit">Log in</button>
    </form>
  );
};

--------------------------------
CHILD-FormInput.js

import React from 'react'

export const FormInput = ({register, errors, label, id, ...inputProps}) => {    -> props koje dobijemo od parenta
  return <>
    <label htmlFor={id}>{label}</label>
    <input
      ref={register}
      id={id}
      name="password"
      type="password"
    />
    {errors.password && <div>{errors.password.message}</div>} 
  </>
}

--------------------------------------------------------------
4. REACT-HOOK-FORM WITH MUI   (inputRef umjesto ref)

import React from 'react';
import Avatar from '@material-ui/core/Avatar';
import Button from '@material-ui/core/Button';
import CssBaseline from '@material-ui/core/CssBaseline';
import TextField from '@material-ui/core/TextField';
import FormControlLabel from '@material-ui/core/FormControlLabel';  -> MUI
import Checkbox from '@material-ui/core/Checkbox';
import Link from '@material-ui/core/Link';
import Grid from '@material-ui/core/Grid';
import LockOutlinedIcon from '@material-ui/icons/LockOutlined';
import Typography from '@material-ui/core/Typography';
import { makeStyles } from '@material-ui/core/styles';
import Container from '@material-ui/core/Container';
import {useForm} from 'react-hook-form'                          -> IMPORT USEFORM
ili
import {useForm, Controller} from 'react-hook-form'              -> *IMPORT USEFORM, Controller ako nema npr Checbox onda njega ubacimo

const useStyles = makeStyles((theme) => ({
  paper: {
    marginTop: theme.spacing(8),
    display: 'flex',
    flexDirection: 'column',
    alignItems: 'center',
  },
  avatar: {
    margin: theme.spacing(1),                                          -> neki css MUI
    backgroundColor: theme.palette.secondary.main,
  },
  form: {
    width: '100%', // Fix IE 11 issue.
    marginTop: theme.spacing(1),
  },
  submit: {
    margin: theme.spacing(3, 0, 2),
  },
}));

const onSubmit = (data) => {                                 -> onSubmit ispisujemo podatke u JSON
    alert(JSON.stringify(data));
};

export default function SignIn() {
  const classes = useStyles();
  const {register, handleSubmit } = useForm()                -> settle useform
  ili
  const {register, handleSubmit, control} = useForm()        -> *za Contoller settler useForm  

  return (
    <Container component="main" maxWidth="xs">
      <CssBaseline />
      <div className={classes.paper}>
        <Avatar className={classes.avatar}>
          <LockOutlinedIcon />
        </Avatar>
        <Typography component="h1" variant="h5">
          Sign in
        </Typography>
        <form className={classes.form} noValidate onSubmit={handleSubmit(onSubmit)}  >     -> da ispise data na submit, useForm
          <TextField
            variant="outlined"
            margin="normal"
            inputRef={register}                                                            -> TextField inputRef={register} je isto kao ref={register} useForm 
            required
            fullWidth
            id="email"
            label="Email Address"
            name="email"
            autoComplete="email"
            autoFocus
          />
          <TextField
            variant="outlined"
            margin="normal"
            inputRef={register}                                                            -> TextField inputRef={register} je isto kao ref={register} useForm 
            required
            fullWidth
            name="password"
            label="Password"
            type="password"
            id="password"
            autoComplete="current-password"
          />
          <FormControlLabel
            control={ <Checkbox inputRef={register} name="remember" color="primary" defaultValue={false}/>}                   -> CHECKBOX INPUT useForm 
            label="Remember me"

            ili ako nema <CheckBox/>
            control={
              <Controller as={Checkbox} control={control} name="remember" color="primary" defaultValue={false}/>}             -> *CHECKBOX ali s Controllerom         
            label="Remember me"
                         
          />
          <Button
            type="submit"
            fullWidth
            variant="contained"
            color="primary"
            className={classes.submit}
          >
            Sign In
          </Button>
          <Grid container>
            <Grid item xs>
              <Link href="#" variant="body2">
                Forgot password?
              </Link>
            </Grid>
            <Grid item>
              <Link href="#" variant="body2">
                {"Don't have an account? Sign Up"}                     -> CSS CISTI
              </Link>
            </Grid>
          </Grid>
        </form>
      </div>
    </Container>
  );
}
-----------------------------------------------------------------------------------------------------------




