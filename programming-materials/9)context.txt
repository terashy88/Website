 CONTEXT
- In a typical React application, data is passed top-down (parent to child) via props
- problem is that are required by many components within an application. 
- Context provides a way to share values between components without having to explicitly pass a prop through every level of the tree.

npr. Napravimo MovieContext.js komponentu
     -zatim poslozimo u App.js(<MovieProvider> oko svega)
     -zatim koristimo sve im MovieContext u komponentama koje su unutar <MovieProvider>, NPR MovieList.js
 
1) MovieContext.js
- export 2 things

import React, {useState, createContext} from 'react';

export const MovieContext = createContext();

export const MovieProvider = (props) => {
		const [movies,setMovies]=useState([
			{
			name:"h potter",
                        price:"10"
			id:"2314"
			},
			{
			name:"g of thrones",
                        price:"20"
			id:"2315"
			},
			{
			name:"inception",
                        price:"20"
			id:"2316"
			},

]);
return(
	<MovieContext.Provider value={[movies, setMovies]}>   - da napravimo array ove gore liste filmova koje zelimo koristim u drugim kompo
		<props.children}  -- da se moze koristiti u drugim komp
        </MovieContext.Provider>
);
}

 SADA TO KORISTIMO U NPR u MovieList.js(prvo moramo u App.js sloziti)
2)App.js
import React, {useState, createContext} from 'react';
import AddMovie from "./AddMovie";
import MovieList from "./MovieList";
import {MovieProvider} from "./MovieContext";

function App() {
	return(
	      <div className=""App>
		<MovieProvider>
			<AddMovie />         -- sada ove komponente imaju dostup svemu u MovieContext(state-u)
			<MoviesList />
		<MovieProvider/>
	       </div>
);
}

 KONAÄŒNO KORISTIMO U
3) MoviesLiest.js
import React, {useState, useContext} from 'react';   - moramo dodati {useContext}
import {MovieContext} from "./MovieContext";

const MovieList = () => {
	const [movies, setMovies] = useContext{MovieContext};      - moramo dodati da zna iz koje komponente uzima useContext

	return(
	      <div>
		
                   <h1> ime filme je {movies.name} a ide je {movies.id} </h1>
                   <p> Filmova ima {movies.length}</> 
                                           - ispisati ce listu filmova iz MoviesList jer je u MovieContext value=[movies, setMovies]
	       </div>
);
};

export default MovieList;

 ILI KORISTIMO U AddMovie(form)
- dodaje nove filmove s cijenom na popis starih(koje koristimo iz MovieContext)

import React, {useState, useContext} from 'react';   - moramo dodati {useContext}
import {MovieContext} from "./MovieContext";

const AddMovie = () => {
	const [movies, setMovies] = useContext{MovieContext};      - moramo dodati da zna iz koje komponente uzima useContext

        const [name, setName]= useState("");
        const [price, setPrice]= useState("");

        const updateName = (e) = >{
			setName(e.target.value);              
                        }
	const updatePrice = (e) = >{
			setPrice(e.target.value);              
                        }
	const addMovie = (e) = >{
			e.preventDefault();    ---stops the page from refreshing when you click on form           
			setMovies(prevMovies => [...prevMovies, {name: name, price: price}]);  -prevMovies su samo filmovi koji su prije bili i na njih dodajemo nove                      
}
	return(
	      <form onSubmit={addMovie}>
		   <input type="text" name="name" value={price} onChange={updatePrice}> 
                   <input type="text" name="name" value={name} onChange={updateName}> 
                   
	       </form>
);
};

export default AddMovie;
