Events

class Events extends Component {
  dispenseWisdom() {
    let messages = [
      "A fool thinks himself to be wise, but a wise man knows himself to be a fool.",
      "Educating the mind without educating the heart is no education at all.",
      "Not everything that is faced can be changed, but nothing can be changed until it is faced."
    ];
    let rIndex = Math.floor(Math.random() * messages.length);
    alert(messages[rIndex]);
  }

  render() {
    return (
      <div className='WiseSquare' onMouseEnter={this.dispenseWisdom}>
        ðŸ˜ƒ
      </div>
    );
  }
}
-----------------------------------------------------------------------
BINDING-kad funkcija koju zovemo u event ima this.(cca)
Kada eventHandler(funkc neka,tu npr. dispenseWisdom() ) ima this koji se odnosi na state

Ali ako imamo deafult msg-> arrow func ili:

class WiseSquareWithProps extends Component {
  constructor(props) {
    super(props);
    this.dispenseWisdom = this.dispenseWisdom.bind(this);
  }
  static defaultProps = {
    messages: [
      "A fool thinks himself to be wise, but a wise man knows himself to be a fool.",
      "Educating the mind without educating the heart is no education at all.",
      "Not everything that is faced can be changed, but nothing can be changed until it is faced."
    ]
  };

  dispenseWisdom() {
    console.log("THIS IS...", this);
    let { messages } = this.props;
    let rIndex = Math.floor(Math.random() * messages.length);
    console.log(messages[rIndex]);
  }

  render() {
    return (
      <div className='WiseSquare' onMouseEnter={this.dispenseWisdom}>
        ðŸ˜ƒ
      </div>
    );
  }
}

ILI bez constructor i bind, ali s arroy
----------------------------------------------------------

class WiseSquareWithProps extends Component {

  static defaultProps = {
    messages: [
      "A fool thinks himself to be wise, but a wise man knows himself to be a fool.",
      "Educating the mind without educating the heart is no education at all.",
      "Not everything that is faced can be changed, but nothing can be changed until it is faced."
    ]
  };

  dispenseWisdom = () => {
    console.log("THIS IS...", this);
    let { messages } = this.props;
    let rIndex = Math.floor(Math.random() * messages.length);
    console.log(messages[rIndex]);
  }

  render() {
    return (
      <div className='WiseSquare' onMouseEnter={this.dispenseWisdom}>
        ðŸ˜ƒ
      </div>
    );
  }
------------------------------------------------------------------------------

