BACKTICKS: kata ``
--------------------------------------------------------------------------
DATA TYPES

6 Data Types that are primitives, checked by typeof operator:

undefined : A variable that has not been assigned a value has the value undefined.                                      -> nema value za sad
null: The Null type has exactly one value: null. The value null represents the intentional absence of any object value. -> nema value uvijek
Boolean : True/False
Number : The number type has three symbolic values: +Infinity, -Infinity, and NaN ("Not a Number").
String : Used to represent textual data.
BigInt : 
Symbol : 

null === undefined //false
null == undefined  //true
!null              //true
1 + null           //1 
1 + undefined      //NaN     

let a;
console.log(a);    //undefined

let value = null;  -> empty value, no match found.
----------------------------------------------------------------
STRUCTURAL TYPES

1) OBJECT: JavaScript variables are containers for data values. Objects are variables too. But objects can contain many values.

EXAMPLE 1.
var person = {
  PROPERTY: "VALUE",
  firstName: "John",
  lastName: "Doe",
  age: 50,
  eyeColor: "blue"
};
----------------------------------------------
2) ARRAY: Arrays are list-like objects whose prototype has methods to perform traversal and mutation operations. 
      Neither the length of a JavaScript array nor the types of its elements are fixed.

- Arrays cannot use strings as element indexes (as in an associative array) but must use integers.

var array_name =       [item1, item2, ...];  
EXAMPLE 1.let fruits = ['Apple', 'Banana']
console.log(fruits.length)
// 2
------------------------------------------------
EXAMPLE 2.
fruits.forEach(function(item, index, array) {
  console.log(item, index)
})
// Apple 0
// Banana 1

EXAMPLE 3.
array containing multiple objects
var officers = [
  { id: 20, name: 'Captain Piett' },
  { id: 24, name: 'General Veers' },
  { id: 56, name: 'Admiral Ozzel' },
  { id: 88, name: 'Commander Jerjerrod' }
];
-----------------------------------------------
3) Function
------------------------------------------------------------------------------------------------
VARIABLE SCOPE let/const
JavaScript variables are containers for data values.

LET/CONST/VAR
-> VAR function scoped(vrijed u cijeloj funkciji)
-> CONST/LET block scoped(vrijed samo u curly brackets {})
-> const se ne mjenja! moze joj dati neku vrijednost i korisit ju, ali se nemre mjenjat
-> var/let mozes mjenjat

function arrayMadness(a, b) {  
  var/const/let ime="mihael"                   -> mogu se koristi u cijeloj funkciji -> var je vredi po cijeloj fji, a const/let jer su u parent {} naspram child {} od if/else                              
  if ( squareFirst > cubeSecond) { 
    const a ="5"                               -> const a i let b se moze koristit samo u ovim curly brackets
    let b ="6"
    var result;                               -> varijabla var result se moze korist u cijeloj funkciji     
    var/const/let ime="mihael"                     -> const/let  se mogu koristi jer su oni u parent {}
  }
  else {
    result = false                       -> tu se moze koristi var result jer je to sve ista funkcija, ali se ne moze let a i const b se su oni u drugoj {}
    var/const/let ime="mihael"    
  }
  return result, ime;                    -> moze se vratit var result(ista fja), var/const/let ime(isti {}), ali se ne mogu vratit const a i let b jer su u child {}                              
}
-----------------------------------------------------------------------
var car = "Fiat";
This code assigns a simple value (Fiat) to a variable named car,

GLOBAL-define outside of every block
      - moze se koristit bilo gdje
BLOCK- define inside code block 
- in a block you can acces any variables defined in that scope or in any parent/ancestor scope

example 1. Global/local
global:num,zbroj
local:numTtwo,numThree, result

let num=3   - global

if (num=3) {
	numTw0=5   --local scope, can acces num but no numThree
}

if (num=3) {
	numThree=6   --local scope
}

let zbroj = function(a,b) {            --zbroj: global    
    let result= a+b            --code  
return result                           --result: local
}
-------------------------------------------------------
example 2. Name variables
let name= "mike"
let name= "ANDREW" - ne moze 2 puta isto ime, u istom scopu
----
let name="mike"

if (name==="mike") {
let name="andrew"
console.log(name)    ---moze 2 puta isto ime, i ispisat ce zadnjE od parenta
}
-------------------------------------------------------
FUNCTIONS / CALLBACKS( a function passed into another function as an argument)

- subprograms: input(argument),code,output(return)
------------------------------------------------------------------------
//EXAMPLE 1.not working/WORKING

let zbroj = function(a,b) {
	 a+b                     NOT WORKING
}

let zbroj = function(a,b) {
	return a+b                        WORKING
}

let zbrojj = function(a,b) {
	let const c = a+b                NOT W  
}

let zbrojj = function(a,b) {
	 c = a+b                               WORKING 
return c 
--------------------------------------------------
//example 1. more returns

function testNum(a) {
  let result;
  if (a > 0) {
    return result = 'positive';
  } else {
    return result = 'NOT positive';
  }
  return result;
}
console.log(testNum(-5));
// expected output: "NOT positive"
-----------------------------------------------------
//EXAMPLE1. skraceno

function testNum(a) {
  let result;
  if (a > 0) {
    result = 'positive';
  } else {
    result = 'NOT positive';
  }
  return result;
}
console.log(testNum(-5));
// expected output: "NOT positive"
-----------------------------------------------------------

let user = function(){
	console.log("welcome")   -code ali se nece nista ispisat/radi
}
isto
let user = function(){
	return console.log("welcome")   -code ali se nece nista ispisat/radi
}

user(); -> tu ce se ispisat


-----------------------------------------
example3. CALLBACK
function greeting(name) {
  alert('Hello ' + name);
}

function processUserInput(callback) {
  var name = prompt('Please enter your name.');
  callback(name);
}

processUserInput(greeting);

--------------------------------------------------------------------------
BACKTICKS `My name is ${name}` 

- for templte string
- umjesto:"moje ime je+ " " +" ime "  , mozemo `moje ime je ${ime}`

example1.
let name="mihael"
let fullName=`my full name is ${name} rasperger`
console.log(fullName)
let
----------------------------------------------------------------------
OBJECTS
The Object class represents one of JavaScript's data types(numbermstrung,boolean,undefined). 
It is used to store various keyed collections and more complex entities. 
A car has properties like weight and color, and methods like start and stop:
car.name = Fiat
car.model = 500
car.start()
car.drive()

Objects are variables too. But objects can contain many values.
This code assigns many values (Fiat, 500, white) to a variable named car:
var car = {type:"Fiat", model:"500", color:"white"};

example1.
let myBook= {
	title: "heri poter",
	author: "j.k.rowling",
	pages: "400"
}
ISPIS
onsole.log(myBook) -sve ispise
onsole.log(myBook.author) ispise j.k.rowling
console.log(myBook.author) ili npr. console.log(`${myBook.title} by ${myBook.author}` )

- ako hocemo mjenjat:
	myBook.title="mihael"
---------------------------------
example2.OBJECT WITH FUNCTION
let myBook= {
	title: "heri poter",
	author: "j.k.rowling"
	pages: "400"
}
let otherBook= {
	title: "biblija",
	author: "apostol"
	pages: "800"
}

let getSummary= function(book){
	return(
		summary:`${book.title} by ${book.author}`,	
		pageCount:`${book.title} is ${book.pages} long`				
)
}

console.log getSummary(myBook)
console.log getSummary(otherBook)
------------------------------
METHODS / BUILD IN Methods(name.length(), name.toLowerCase(),. name.trim(),..etc
- object property whos value is function
- pomocu THIS dohvacamo object property inside method

example1.
var person = {
  firstName: "John",
  lastName : "Doe",
  id       : 5566,
  fullName : function() {                          --fullName object property, value is func
    return this.firstName + " " + this.lastName;
  }
};

console.log(person.fullName(this)) - ispise method
................................................
ARRAYS
-  list-like objects.
- to store a list od values (npr.list of objects)

Example 1.
var cars = new Array("Saab", "Volvo", "BMW");
console.log(cars[0])--ispise prvog

PUSH/POP
cars.push("fico")- dodaje u array na zadnje mjesto
cars.pop() brise zadnjeg

SHIFT/UNSHIFT
cars.unshift("fico")- dodaje u array na prvo mjesto
cars.shift() brise prvog

SPLICE
The splice() method changes the original array and returns an array WITHOUT deleted elements.

cars.splice(1,2, "audi") --start at index 1(volvo) and remove 2 items(volvo+bmw), and add "audi")
cars.splice(1,0, "audi") -- dodaje na index 1 audi
cars.splice(1,1) -- brise na index 1 item //("Volvo", "BMW");

----------------------------------
Example 2.ispis array itema
cars.forEach(function(item){   --forEach vrsti za svaki item, da pise console.log("BOZIC"), bi ispisalo BOZIC 3 puta jer ima 3 itema u arrayu
console.log(item)	       --ispise sve iteme u arrayu	
)
ILI
cars.forEach(function(item,index){   
console.log(`${item} a njegov je broj ${index}`)	       	
)

---------------------------------------
Example 3.Searching array
-The find() method returns the value of the first element in the provided array that satisfies the provided testing function.

const array1 = [5, 12, 8, 130, 44];

const found = array1.find(element => element > 10);

console.log(found);
// expected output: 12
------------------------
Example 4.Filter array
-The filter() method creates a new array with all elements that pass the test implemented by the provided function.

const words = ['spray', 'limit', 'elite', 'exuberant', 'destruction', 'present'];

const result = words.filter(word => word.length > 6);

console.log(result);
// expected output: Array ["exuberant", "destruction", "present"]
.......................................................................
Example 4. sort array
The sort() method sorts the elements of an array in place and returns the sorted array. The default sort order is ascending, 

const months = ['March', 'Jan', 'Feb', 'Dec'];
months.sort();
console.log(months);
// expected output: Array ["Dec", "Feb", "Jan", "March"]

const array1 = [1, 30, 4, 21, 100000];
array1.sort();
console.log(array1);
// expected output: Array [1, 100000, 21, 30, 4]
-------------------------------------------------------------
ARRAYS OF OBJECT
- zadajemo:
let cars = [
  {
    "color": "purple",
    "type": "minivan",
    "registration": new Date('2017-01-03'),
    "capacity": 7
  },
  {
    "color": "red",
    "type": "station wagon",
    "registration": new Date('2018-03-03'),
    "capacity": 5
  },
]
ISPIS/DOHVACANJE:
console.log(cars)- sve ispice
console.log(cars[0]) - ispise prvog cijelog
console.log(cars.color) - undefined ispise)
console.log(cars[0].color) ispise boju prvog(purple)
cars.forEach(element => console.log(element.color)); - ispise sve boje autiju purple, red
const boje = cars.map(x => x.color);
console.log(boje);                                   - ispise array boja ["purpe", "red"]
-------------------------------------------
LOOPING THROUGH:  FOREACH, MAP, REDUCE, FILTER

https://medium.com/poka-techblog/simplify-your-javascript-use-map-reduce-and-filter-bd02c593cc2d

- looping through1: FOREACH
- The forEach() method executes a provided function once for each array element.

const array1 = ['a', 'b', 'c'];
array1.forEach(element => console.log(element));
// expected output: "a"
// expected output: "b"
// expected output: "c"

example2.
var numbers = [65, 44, 12, 4];
numbers.forEach(myFunction)

                   value na indexu u arrayu arr
function myFunction(item, index, arr) {
  arr[index] = item * 10; 
      index       value
}
-----------------------------------------------------------------------
- looping through1: MAP
- The map() method creates a new array populated with the results of calling a provided function on every element in the calling array.

Objects, {} in JavaScript does not have the method .map(). It's only for Arrays, [].
data = $.parseJSON(data);

const array1 = [1, 4, 9, 16];
// pass a function to map
const map1 = array1.map(x => x * 2);

console.log(map1);
// expected output: Array [2, 8, 18, 32]
--------------------------------------------------
- looping through2: FILTER
- The filter() method creates a new array with all elements that pass the test implemented by the provided function.

Example 1.
const words = ['spray', 'limit', 'elite', 'exuberant', 'destruction', 'present'];
const result = words.filter(word => word.length > 6);
console.log(result);
// expected output: Array ["exuberant", "destruction", "present"]
--------------------------------------------------------------------------

Example 2.
- looping through: (find ispise prvog, filter sve)
let car = cars.filter(car => car.color === "red" && car.type === "cabrio");
console.log(car)
-------------------------------------------------------------------------------
ARRAY WITH CONDITIONALS
Example 1. map / if
let sizes = cars.map(car => {
  if (car.capacity <= 3){
    return "small";
  }
  if (car.capacity <= 5){
    return "medium";
  }
  return "large";
});
console.log(sizes);
// output:
// ['large','medium','medium', ..., 'small']
-------------------------------
Example 2. map / ternary
<div>
  {data.map((record) => (
    record.list.length > 0
      ? (<YourRenderComponent record={record} key={record.id} />)
      : null
  ))}
</div>
----------------
Example 3. similar to example 1. map / if
row = myArray.map((cell, i) => {

    if (i == myArray.length - 1) {
      return <div> Test Data 1</div>;
    }
    return <div> Test Data 2</div>;
  });
------------------
Example 4. map / &&
myArray.map(link => 
    <div className="youtubeLinks">                       
        {link.category == 1 && <p> print category 1</p>}
        {link.category == 2 && <p> print category 2</p>}
        {link.category == 3 && <p> print category 3</p>}
        {link.category == 4 && <p> print category 4</p>}
        {link.category == 5 && <p> print category 5</p>}
        <img src={link.link} /> // Here is error img
    </div>
)
--------------------------------------------------------------------------------
ARRAY OF OBJECTS (conditional)

ZADANAO              
var personnel = [
    {
        id: 5,
        name: "Luke Skywalker",
        pilotingScore: 98,
        shootingScore: 56,
        isForceUser: true,
    },
    {
        id: 82,
        name: "Sabine Wren",
        pilotingScore: 73,
        shootingScore: 99,
        isForceUser: false,
    },
    {
        id: 22,
        name: "Zeb Orellios",
        pilotingScore: 20,
        shootingScore: 59,
        isForceUser: false,
    }
]

HOCEMO only name and id where isForceUser=true:
[ { id: 5, name: 'Luke Skywalker' }, 
  { id: 15, name: 'Ezra Bridger' }, 
  { id: 11, name: 'Caleb Dume' } ] 
-------------------------------------------------
1. FILTER
The filter() method creates a new array with all elements that pass the test implemented by the provided function.

//prvi nacin(filter stavi objekte koji prodju u novi array)
const result = words.filter(word => word.length > 6);
console.log(result);
ili
//prvi nacin(filter stavi objekte koji prodju test u novi array)
const res = players.filter((e) => e.height < 200);
console.log("filter", res);


1.1 FILTER + MAP
 filer+map(filter stavi objekte koji produ test u novi array, map kako ce biti prikazani)
var APersonnel = personnel
                    .filter((person) => person.isForceUser)
                    .map((person) => ({ id: person.id, name: person.name }));

FILTER + (if/else) + map

var APersonnel = personnel
                    .filter((person) => {
		      if (person.id <15) {
			return: true}
		     })
                    .map((person) => ({ id: person.id, name: person.name }));
ili
//drugi nacin filer+map(filter stavi objekte koji produ test u novi array, map kako ce biti prikazani)
var niski = players
  .filter((player) => {
    if (player.height < 200) {
      return true;
    }
  })
  .map((player) => ({ ime: player.name, prezime: player.surname }));
console.log("filter + map", niski);
---------------------------------------------------------------------
2. FOREACH
                   EMPTY ARRAY
var BPersonnel = [];
                   CALLBACK FUNC 
personnel.forEach((person) => {
    if (person.isForceUser) {
        BPersonnel.push({ id: person.id, name: person.name });
    }
});

------------------------------------------------------------------------
3. REDUCE
The reduce() method executes a reducer function (that you provide) on each element of the array, resulting in single output value.

primjer. REDUCE + IF + SAVE IN ARRAY
//treci nacin reduce( reduce bi izbacio objekt koji zadovoljava uvjet, pa ga treba push u array)

var rez = players.reduce((niski, players) => {
if (players.height<200) {
  niski.push({ime: players.name, prezime: players.surname});
}
return niski;
}, ["mihael"]);


EXAMPLE 2.
We need to know the total years of experience of all of them.

var pilots = [
  {
    id: 10,
    name: "Poe Dameron",
    years: 22,
  },
  {
    id: 2,
    name: "Temmin 'Snap' Wexley",
    years: 30,
  },
  {
    id: 41,
    name: "Tallissan Lintra",
    years: 16,
  },
  {
    id: 99,
    name: "Ello Asty",
    years: 22,
  }
];

var totalYears = pilots.reduce(function (accumulator, pilot) {
  return accumulator + pilot.years;
}, 0);
ILI
const totalYears = pilots.reduce((acc, pilot) => acc + pilot.years, 0);

EXAMPLE 3.
iSPISE NAME ONIH KOJI IMAJU 22 GODINE
-> TREBAM ARRAY: ["Poe Dameron","Ello Asty"]                        definiram array 
const totalYears = pilots.reduce((acc, pilot) => acc + pilot.name, []);


-------------------------------------------------------------------
2. NACIN
PARENT
<Component doWhatever={handleChange()} title="Mihael"/> ,

CHILD
 const child =  ({details}) => {
        const { doWhatever, title} = details; 
	return (
	<div>
		<button onClick={doWhatever}> {title} </button>
        </div>	
------------------------------------------------------------------------------------
...SPREAD/...REST/DESTRUCTURING 

SPREAD -> to expand new array with previous array

var arr=[1,2,3]
var arr2=[...arr, 4,5,6]
console.log(arr2)          ///[1,2,3,4,5,6]
--------------------------------------------------------------------
DESTRUCTURING ARRAY
[a,b,...nesto] = [2,3,4,5,6]
console.log(a)          ///[2]
console.log(b)          ///[3]
console.log(nesto)      ///[4,5,6]
---------------------------------------
DESTRUCTURING OBJECTS (ALIAS)
const employee = {
	id:"abc",
        name:"anothony",
        salary:"$10",
        address: {
            salary:"$200",                                                           ->imamo 2 salary (trebamo na jednom ALIAS da bi ga koristili)                                                             
            street:"210 washington",
            country:"canada",
            province:"ontario,
            zones: {
                   plantZone:"7b",
                   alienZone:"4"
                    }
        }
}

export default function App() {
	const {name, address, salary: employeeSalary}= employee;         - tu destructure address out of employee + ALIASprvi salary iz elmployee.salary ce dobit ALIAS employeeSalary jer su 2
        const {street, county, zones} = address;                                        - street, county, zones out of address
        const {plantZone} = zones;                                                      - plantZone out of zones
        ILI BOLJE
        const {name,
               address:{ street,                                          - destructure street
                        country,
                        zones : { 
                                 plantzone                                - destructure plantZone
                                }
                       }, 
               salary: employeeSalary                                     - alis
              }= employee;                        


   return (
	<div>
           <h2> {name} {employeeSalary}</h2>                                            -inace bi morali pisati employee.name + console.log(employeeSalary //$10)
           <h2> {address.street} {address.country} {address.zones.plantZone} </h2>      -inace bi morali pisati employee.address.street
           ILI BOLJE
           <h2> `${street} ${country} ${plantZone}` </h2>                                -inace bi morali pisati {employee.address.zones.plantZone}
 
        </div>
)	
}
--------------------------------------------------------------------------------------
REST -> allows function to accept an indefinite number of arguments as an array.
     -> rest operator groups the arguments as an array, we can iterate through it and do whatever operation we need to do using the array. 

Example 1.
function sum(...theArgs) {
  return theArgs.reduce((previous, current) => {
    return previous + current;
  });
}
console.log(sum(1, 2, 3));
// expected output: 6

Example 2. //pravi
function printMe(name, value, ...props) {   -> imamo argumente: ime, value i props(koliko god ih ima)
  console.log(name)
  console.log(value) 
  args.forEach(arg => console.log(props))   -> ispisemo ime, value i s pomocu forEach dobijemo sve propse(koliko god ih ima)
}
------------------------------------------------------------------------------
PROMISES - then/catch

//definiramo Promise
const promise1 = new Promise((resolve, reject) => {
  let a= 1+1;
  if (a==2) {
    resolve("sucess")
  }
  else{
  reject ("faileddd")
  }
  
});

promise1.then((value) => {                                               -> then + resolve
  console.log(value);                                                    -> then je kada je true Promise/prolazi nesto na backend
  // expected output: "Success!"
});
//then + resolve
//u then se ispise sto smo stavili u resolve value="Success!"

promise1.catch((error) => {                                              -> catch + reject
  console.error(error);                                                  -> catch kada je false Promise/ne prolazi na backend
});
//catch + reject
//u catch se ispise sto smo stavili u reject error="Faileddd!"

//sve u jednom 
promise1.then((value) => {
  console.log(value);                                                    -> then/catch u jednom
  // expected output: "Success!"
}).catch((error) => {
  console.error(error);
});
------------------------------------------------------------------------------------------------------------------------------
SETIMEOUT/clearTIMEOUT

For example 1., the code below prints “Hello, World!” to the developer console after 3,000 milliseconds (or 3 seconds).
setTimeout(() => {
  console.log('Hello, World!')
}, 3000);

Example 2. 
useEffect(() => {
  const timer = setTimeout(() => {
    console.log('This will run after 1 second!')              -> ISPUSUJE NAKON 1SEK
  }, 1000);
  return () => clearTimeout(timer);                           -> VRATI TIMEOUT NA 0
}, []);
---------------------------------------------------------------------------------------------------------
EXAMPLE filter + map + reduce

Our objective: get the total score of force users only.
var personnel = [
  {
    id: 5,
    name: "Luke Skywalker",
    pilotingScore: 98,
    shootingScore: 56,
    isForceUser: true,
  },
  {
    id: 82,
    name: "Sabine Wren",
    pilotingScore: 73,
    shootingScore: 99,
    isForceUser: false,
  },
];

const totalJediScore = personnel
  .filter(person => person.isForceUser)                   // Result: [{...}, {...}, {...}] (Luke, Ezra and Caleb)
  .map(jedi => jedi.pilotingScore + jedi.shootingScore)   // Result: [154, 110, 156]
  .reduce((acc, score) => acc + score, 0);                // Result: 420

