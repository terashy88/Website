USEMEMO
-> do not use everywhere, bc you add to memory every time.
-> cache result od

USECASE
-> 1) Slow function that doesnt recompute every time(liste)
-> 2) UPDATE OBJECT only when content is CHANGED! Reference equality, wrap object! (Example 3.). 
      To not make new reference object every time func is called, but only when it something changed in object!



useMemo will only recompute the memoized value when one of the dependencies has changed.
If no array is provided, a new value will be computed on every render.
 
This optimization helps to avoid expensive calculations on every render.
. Write your code so that it still works without useMemo — and then add it to optimize performance.

const memoizedValue = useMemo(() => computeExpensiveValue(a, b), [a, b]);
                                          function             dependencies a,b ->
                                    we memorize it this func        mjenja se samo kada se promjeni a ili b

NOTUSE
You won’t want to have useMemo fire off any SIDE EFFECTS or any ASYNCHRONUS calls. 
In those instances, you should use useEffect.

Example 1.
If we have a function compute a+b, and we set a=1, b=2 it will return 3. 
But if it uses memoization, the next time we run a=1, b=2 through the function, it won’t add them up;
 it will just remember the answer is 3 without executing the adding function.
-------------------------------------------------------------------------------------------------------------------------------
Example 2.
const List = React.useMemo(() =>
  listOfItems.map(item => ({
    ...item,
    itemProp1: expensiveFunction(props.first),
    itemProp2: anotherPriceyFunction(props.second)            -> SLOW FUNC, pamti prijasnju listu, i mapira nanovo jedino ako se list promjenila
  })), [listOfItems]
)
--------------------------------------------------------------------------------------------------------------------------------
Example 3.    

BEZ USEMEMO-> IMAMO NEKU TEMU U FUNKCIJI
function...{                                               -> EVERY TIME we run a func we create a new themeStyle, and it has absolute the SAME VALUES
themeStyles =   {                                          -> REFERENCE DIFFERENT PLACES IN MEMOMRY!
		background: dark ? 'black': 'white',                      
                color: dark ? 'white' : black 
                }, 
}

S USEMEMO:
function...{
const themeStyles = useMemo ( () => {                          -> sada kada callamo funkciju, ne kreiramo svaki puta novi themeStyle nego samo se dark promjenio! 
	return { 
		background: dark ? 'black': 'white',
                color: dark ? 'white' : black 
                }, 
},[dark]);
}