USESTATE
-> da bi se nesto na komponenti vidlo mora se rerenderat

import React,{ useState } from "react";
import "./styles.css";
const AppDemo9 = () => {
  const [count, setCount] = useState(0);  definiramo count, pocetno je 0
  return (
    <div className="App">
      <h2>count: {count}</h2>            -> ispisujemo ga
      <button
        onClick={() => {
          count = count+ 1;
          console.log(count);   -> povecamo za 1 count
        }}
      >
        
      </button>
    </div>

The setState function is used to update the state. 

When changes re-render component.

The initial value will be assigned only on the initial render

Before React 16.8, state local to a component was only possible with class-based components.

The first array item represents the actual state, and the second item constitutes the state updater function. 
        actuial     update func            initial value 
const [darkMode, setDarkMode] = useState(true);


EXAMPLE 1. kako pisemo u input m, i ,h ,a,...tako se ispisuje m,i,ha
This might be the behavior you want, e.g., to perform an operation such as a search on every character. This is called a controlled component. 
However, it could be just the opposite, and the renderings become problematic. Then you need an uncontrolled component.

INPUTS- 
import { useState } from "react";
import "./styles.css";
const AppDemo10 = () => {
  const [value, setValue] = useState("");
  console.log("render");
  const handleInputChange = (e) => {
    setValue(e.target.value);
  };
  return (
    <div className="App">
      <input value={value} onChange={handleInputChange} />
    </div>
  );
};

