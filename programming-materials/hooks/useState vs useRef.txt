USESTATE
-> da bi se nesto na komponenti vidlo mora se rerenderat
-> s useState se npr. vidi kad povecavamo broj, s useRef se ne vidi(treba imat button pa na click se vidi)
-------------------------------------------------------------------
EXAMPLE 1.
import React,{ useState } from "react";
import "./styles.css";
const AppDemo9 = () => {
  const [count, setCount] = useState(0);  definiramo count, pocetno je 0
  return (
    <div className="App">
      <h2>count: {count}</h2>            -> ispisujemo ga i  VIDI SE 1,2,3,4,....
      <button
        onClick={() => {
          count = count+ 1;
          console.log(count);   -> povecamo za 1 count
        }}
      >
        
      </button>
    </div>

USEREF
import { useRef } from "react";
import "./styles.css";
const AppDemo9 = () => {
  const countRef = useRef(0);
  console.log("render");
  return (
    <div className="App">
      <h2>count: {countRef.current}</h2>                       -> nista se ne VIDI(ne rendera se component)
      <button
        onClick={() => {
          countRef.current = countRef.current + 1;
          console.log(countRef.current);                       -> console se povecava 1,2,3,4....
        }}
      >
        increase count
      </button>
    </div>
----------------------------------------------------------------------------------------------------------
EXAMPLE 2.
kako pisemo u input m, i ,h ,a,...tako se ispisuje m,i,ha
This might be the behavior you want, e.g., to perform an operation such as a search on every character. This is called a controlled component. 
However, it could be just the opposite, and the renderings become problematic. Then you need an uncontrolled component.

USESTATE -> ONLY INPUT
INPUTS-                            -> DODAJE SVAKO SLOVO PO SLOVO
import { useState } from "react";
import "./styles.css";
const AppDemo10 = () => {
  const [value, setValue] = useState("");
  console.log("render");
  const handleInputChange = (e) => {
    setValue(e.target.value);
  };
  return (
    <div className="App">
      <input value={value} onChange={handleInputChange} />
    </div>
  );
};

USEREF- INPUT + BUTTON  -> DODAJE VALUE TEK KAD SE KLIKNE BUTTON
With this solution, we do not cause render cycles on every keystroke. 
On the other side, we need to “submit” the input with a button to update the state variable value. 
As you can see from the console output, the second render first occurs on button click.
import { useState, useRef } from "react";
import "./styles.css";
const AppDemo11 = () => {
  const [value, setValue] = useState("");
  const valueRef = useRef();
  console.log("render");
  const handleClick = () => {
    console.log(valueRef);
    setValue(valueRef.current.value);
  };
  return (
    <div className="App">
      <h4>Value: {value}</h4>
      <input ref={valueRef} />
      <button onClick={handleClick}>click</button>
    </div>
  );





